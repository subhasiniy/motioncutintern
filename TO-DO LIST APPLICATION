#CONSOLE IMPLEMENTATION 

import json
import os

class TaskManager:
    def __init__(self):
        self.tasks = []
        self.load_tasks()

    def load_tasks(self):
        if os.path.exists('tasks.json'):
            with open('tasks.json', 'r') as file:
                self.tasks = json.load(file)

    def save_tasks(self):
        with open('tasks.json', 'w') as file:
            json.dump(self.tasks, file)

    def add_task(self, task):
        self.tasks.append({'task': task, 'completed': False})
        self.save_tasks()

    def edit_task(self, index, new_task):
        if 0 <= index < len(self.tasks):
            self.tasks[index]['task'] = new_task
            self.save_tasks()

    def delete_task(self, index):
        if 0 <= index < len(self.tasks):
            del self.tasks[index]
            self.save_tasks()

    def mark_completed(self, index):
        if 0 <= index < len(self.tasks):
            self.tasks[index]['completed'] = True
            self.save_tasks()

    def display_tasks(self):
        for i, task in enumerate(self.tasks):
            status = "✓" if task['completed'] else "✗"
            print(f"{i + 1}: [{status}] {task['task']}")

def main():
    task_manager = TaskManager()
    
    while True:
        print("\nTo-Do List:")
        task_manager.display_tasks()
        print("\nOptions:")
        print("1. Add Task")
        print("2. Edit Task")
        print("3. Delete Task")
        print("4. Mark Task as Complete")
        print("5. Exit")
        
        choice = input("Choose an option: ")
        
        if choice == '1':
            task = input("Enter the task: ")
            task_manager.add_task(task)
        elif choice == '2':
            index = int(input("Enter task number to edit: ")) - 1
            new_task = input("Enter the new task: ")
            task_manager.edit_task(index, new_task)
        elif choice == '3':
            index = int(input("Enter task number to delete: ")) - 1
            task_manager.delete_task(index)
        elif choice == '4':
            index = int(input("Enter task number to mark as complete: ")) - 1
            task_manager.mark_completed(index)
        elif choice == '5':
            break
        else:
            print("Invalid choice. Please try again.")

if __name__ == "__main__":
    main()

#OPTINAL GUI IMPLEMENTATION

import json
import os
import tkinter as tk
from tkinter import messagebox

class TaskManager:
    def __init__(self):
        self.tasks = []
        self.load_tasks()

    def load_tasks(self):
        if os.path.exists('tasks.json'):
            with open('tasks.json', 'r') as file:
                self.tasks = json.load(file)

    def save_tasks(self):
        with open('tasks.json', 'w') as file:
            json.dump(self.tasks, file)

    def add_task(self, task):
        self.tasks.append({'task': task, 'completed': False})
        self.save_tasks()

    def edit_task(self, index, new_task):
        if 0 <= index < len(self.tasks):
            self.tasks[index]['task'] = new_task
            self.save_tasks()

    def delete_task(self, index):
        if 0 <= index < len(self.tasks):
            del self.tasks[index]
            self.save_tasks()

    def mark_completed(self, index):
        if 0 <= index < len(self.tasks):
            self.tasks[index]['completed'] = True
            self.save_tasks()

class TaskManagerApp:
    def __init__(self, master):
        self.master = master
        self.master.title("Task Manager")
        self.task_manager = TaskManager()

        self.task_listbox = tk.Listbox(master, selectmode=tk.SINGLE, width=50)
        self.task_listbox.pack(pady=10)

        self.entry = tk.Entry(master, width=50)
        self.entry.pack(pady=5)

        self.add_button = tk.Button(master, text="Add Task", command=self.add_task)
        self.add_button.pack(pady=5)

        self.edit_button = tk.Button(master, text="Edit Task", command=self.edit_task)
        self.edit_button.pack(pady=5)

        self.delete_button = tk.Button(master, text="Delete Task", command=self.delete_task)
        self.delete_button.pack(pady=5)

        self.complete_button = tk.Button(master, text="Mark as Complete", command=self.mark_completed)
        self.complete_button.pack(pady=5)

        self.update_task_list()

    def add_task(self):
        task = self.entry.get()
        if task:
            self.task_manager.add_task(task)
            self.entry.delete(0, tk.END)
            self.update_task_list()

    def edit_task(self):
        selected = self.task_listbox.curselection()
        if selected:
            index = selected[0]
            new_task = self.entry.get()
            if new_task:
                self.task_manager.edit_task(index, new_task)
                self.entry.delete(0, tk.END)
                self.update_task_list()

    def delete_task(self):
        selected = self.task_listbox.curselection()
        if selected:
            index = selected[0]
            self.task_manager.delete_task(index)
            self.update_task_list()

    def mark_completed(self):
        selected = self.task_listbox.curselection()
        if selected:
            index = selected[0]
            self.task_manager.mark_completed(index)
            self.update_task_list()

    def update_task_list(self):
        self.task_listbox.delete(0, tk.END)
        for task in self.task_manager.tasks:
            status = "✓" if task['completed'] else "✗"
            self.task_listbox.insert(tk.END, f"[{status}] {task['task']}")

if __name__ == "__main__":
    root = tk.Tk()
    app = TaskManagerApp(root)
    root.mainloop()
