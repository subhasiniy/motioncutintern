#BASIC CONSOLE IMPLEMENTATION

import random
import string

def generate_password(length, use_uppercase, use_numbers, use_symbols):
    characters = string.ascii_lowercase
    if use_uppercase:
        characters += string.ascii_uppercase
    if use_numbers:
        characters += string.digits
    if use_symbols:
        characters += string.punctuation

    if length <= 0 or len(characters) == 0:
        return None

    password = ''.join(random.choice(characters) for _ in range(length))
    return password

def main():
    print("Welcome to the Secure Password Generator!")
    
    length = int(input("Enter desired password length: "))
    use_uppercase = input("Include uppercase letters? (y/n): ").lower() == 'y'
    use_numbers = input("Include numbers? (y/n): ").lower() == 'y'
    use_symbols = input("Include symbols? (y/n): ").lower() == 'y'

    password = generate_password(length, use_uppercase, use_numbers, use_symbols)
    
    if password:
        print(f"Generated Password: {password}")
    else:
        print("Failed to generate a password. Please check your input criteria.")

if __name__ == "__main__":
    main()
                       
#OPTIONAL GUI IMPLEMENTATION

import random
import string
import tkinter as tk
from tkinter import messagebox

def generate_password(length, use_uppercase, use_numbers, use_symbols):
    characters = string.ascii_lowercase
    if use_uppercase:
        characters += string.ascii_uppercase
    if use_numbers:
        characters += string.digits
    if use_symbols:
        characters += string.punctuation

    if length <= 0 or len(characters) == 0:
        return None

    password = ''.join(random.choice(characters) for _ in range(length))
    return password

class PasswordGeneratorApp:
    def __init__(self, master):
        self.master = master
        self.master.title("Secure Password Generator")

        self.label_length = tk.Label(master, text="Password Length:")
        self.label_length.pack(pady=5)
        
        self.entry_length = tk.Entry(master)
        self.entry_length.pack(pady=5)

        self.var_uppercase = tk.BooleanVar()
        self.checkbox_uppercase = tk.Checkbutton(master, text="Include Uppercase Letters", variable=self.var_uppercase)
        self.checkbox_uppercase.pack(pady=5)

        self.var_numbers = tk.BooleanVar()
        self.checkbox_numbers = tk.Checkbutton(master, text="Include Numbers", variable=self.var_numbers)
        self.checkbox_numbers.pack(pady=5)

        self.var_symbols = tk.BooleanVar()
        self.checkbox_symbols = tk.Checkbutton(master, text="Include Symbols", variable=self.var_symbols)
        self.checkbox_symbols.pack(pady=5)

        self.generate_button = tk.Button(master, text="Generate Password", command=self.generate_password)
        self.generate_button.pack(pady=10)

        self.result_label = tk.Label(master, text="")
        self.result_label.pack(pady=5)

        self.copy_button = tk.Button(master, text="Copy to Clipboard", command=self.copy_to_clipboard)
        self.copy_button.pack(pady=5)

    def generate_password(self):
        try:
            length = int(self.entry_length.get())
            use_uppercase = self.var_uppercase.get()
            use_numbers = self.var_numbers.get()
            use_symbols = self.var_symbols.get()

            password = generate_password(length, use_uppercase, use_numbers, use_symbols)

            if password:
                self.result_label.config(text=f"Generated Password: {password}")
            else:
                messagebox.showerror("Error", "Failed to generate a password. Please check your input criteria.")
        except ValueError:
            messagebox.showerror("Invalid input", "Please enter a valid number for password length.")

    def copy_to_clipboard(self):
        password = self.result_label.cget("text").replace("Generated Password: ", "")
        self.master.clipboard_clear()
        self.master.clipboard_append(password)
        messagebox.showinfo("Copied", "Password copied to clipboard!")

if __name__ == "__main__":
    root = tk.Tk()
    app = PasswordGeneratorApp(root)
    root.mainloop()
